/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.ServicioRESTOpenAPI.api;

import com.example.ServicioRESTOpenAPI.model.Error;
import com.example.ServicioRESTOpenAPI.model.Producto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-24T16:40:58.091955800+02:00[Europe/Madrid]")
@Validated
@Api(value = "default", description = "the default API")
public interface DefaultApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET / : List all products
     *
     * @return List all products (status code 200)
     *         or unexpected error (status code 400)
     */
    @ApiOperation(value = "List all products", nickname = "getProductos", notes = "", response = Producto.class, responseContainer = "List", tags={ "productos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List all products", response = Producto.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "unexpected error", response = Error.class) })
    @GetMapping(
        value = "/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Producto>> getProductos() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"precio\" : 6.027456183070403, \"categoria\" : \"categoria\", \"id\" : 0, \"nombre\" : \"nombre\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST / : Add new product
     *
     * @param producto  (required)
     * @return Null response (status code 201)
     *         or unexpected error (status code 400)
     */
    @ApiOperation(value = "Add new product", nickname = "postProductos", notes = "", tags={ "productos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Null response"),
        @ApiResponse(code = 400, message = "unexpected error", response = Error.class) })
    @PostMapping(
        value = "/",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> postProductos(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Producto producto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
